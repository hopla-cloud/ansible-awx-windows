---
# tasks file for hoplacloud.windows_ad

- name: Set password for Administrator
  win_user:
    name: administrator
    password: "{{ administrator_password }}"
    password_never_expires: yes
    account_disabled: no

- name: Install Active Directory with sub features and management tools
  win_feature:
    name:
    - AD-Domain-Services
    - FS-Data-Deduplication
    - FS-DFS-Replication
    state: present
    include_sub_features: yes
    include_management_tools: yes

- name: Create new domain in a new forest on the target host
  win_domain:
    dns_domain_name: "{{ ad_domain_name }}"
    safe_mode_password: "{{ ad_safe_password }}"
    domain_netbios_name: "{{ ad_netbios_name }}"
  register: domain_install

- name: Reboot server
  win_reboot:
    reboot_timeout: 3600
  when: domain_install.changed

- name: Get DistinguishedName
  win_shell: (Get-ADDomain).DistinguishedName
  register: ad_domain
  changed_when: ad_domain.rc == 1

- name: Set fact ad_domain
  set_fact:
    ad_domain: "{{ ad_domain.stdout_lines[0] }}"

- name: Ensure all Organizational Unit is present [1/2]
  win_shell: |
    $ou_check = (Get-ADOrganizationalUnit -Filter 'Name -like "ORGANIZATION"').Name
    if ($ou_check -notlike "ORGANIZATION"){New-ADOrganizationalUnit -Name "ORGANIZATION" -Path "{{ ad_domain }}"}
  register: ad_ou_create
  changed_when: ("Change" in ad_ou_create.stdout)

- name: Ensure all Organizational Unit is present [2/2]
  win_shell: |
    $ou_check = (Get-ADOrganizationalUnit -Filter 'Name -like "{{ item }}"').Name
    if ($ou_check -notlike "{{ item }}"){
    New-ADOrganizationalUnit -Name "{{ item }}" -Path "OU=ORGANIZATION,{{ ad_domain }}"
    Write-Host Change
    }
  register: ad_ou_n2_create
  changed_when: ("Change" in ad_ou_n2_create.stdout)
  with_items:
    - Admins
    - Users
    - Security groups
    - Servers
    - Service accounts

- name: Ensure GPO Hopla.cloud is present
  win_shell: |
    $gpo_check = (Get-GPO -all ).DisplayName
    if ($gpo_check -notcontains "Hopla.cloud"){
    New-GPO -Name "Hopla.cloud"
    Write-Host Change
    }
  register: ad_gpo_create
  changed_when: ("Change" in ad_gpo_create.stdout)

- name: GPO Hopla.cloud windows update
  win_shell: |
    Set-GPRegistryValue -Name "Hopla.cloud" -Key "HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -ValueName "SetActiveHours" -Type DWORD -Value 1
    Set-GPRegistryValue -Name "Hopla.cloud" -Key "HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -ValueName "ActiveHoursStart" -Type DWORD -Value 6
    Set-GPRegistryValue -Name "Hopla.cloud" -Key "HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -ValueName "ActiveHoursEnd" -Type DWORD -Value 21

- name: GPO Hopla.cloud windows desktop
  win_shell: |
    Set-GPRegistryValue -Name "Hopla.cloud" -Key "HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\System" -ValueName "Wallpaper" -Type string  -Value "C:\Program Files\hopla.cloud\Desktop-hopla.cloud.png"
    Set-GPRegistryValue -Name "Hopla.cloud" -Key "HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\System" -ValueName "WallpaperStyle" -Type string -Value "4"

- name: GPO Hopla.cloud windows firewall
  win_shell: |
    Set-GPRegistryValue -Name "Hopla.cloud" -Key "HKLM\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile" -ValueName "EnableFirewall" -Type DWORD  -Value 0
    Set-GPRegistryValue -Name "Hopla.cloud" -Key "HKLM\SOFTWARE\Policies\Microsoft\WindowsFirewall\PrivateProfile" -ValueName "EnableFirewall" -Type DWORD  -Value 0
    Set-GPRegistryValue -Name "Hopla.cloud" -Key "HKLM\SOFTWARE\Policies\Microsoft\WindowsFirewall\PublicProfile" -ValueName "EnableFirewall" -Type DWORD  -Value 0

- name: Ensure GPO Hopla.cloud is linked
  win_shell: |
    [xml]$gpoReport = Get-GPOReport -Name Hopla.cloud -ReportType xml
    if ($gpoReport.GPO.LinksTo.Enabled -notlike "true"){
    new-GPLink -Name "Hopla.cloud" -Target "{{ ad_domain }}" -LinkEnabled Yes
    Write-Host Change
    }
  register: ad_gpo_link_create
  changed_when: ("Change" in ad_gpo_link_create.stdout)

- name: Ensure GG_ADM_ALL is present
  win_domain_group:
    name: GG_ADM_ALL
    scope: global
    path: "OU=Security groups,OU=ORGANIZATION,{{ ad_domain }}"

- name: Add GG_ADM_ALL to a administrator group.
  win_domain_group_membership:
    name: Administrators
    members: GG_ADM_ALL
    state: present

- name: Add GG_ADM_ALL to a Backup Operators group.
  win_domain_group_membership:
    name: "Backup Operators"
    members: GG_ADM_ALL
    state: present

- name: Add GG_ADM_ALL to a Domain Admins group.
  win_domain_group_membership:
    name: "Domain Admins"
    members: GG_ADM_ALL
    state: present

- name: Add GG_ADM_ALL to a Enterprise Admins group.
  win_domain_group_membership:
    name: "Enterprise Admins"
    members: GG_ADM_ALL
    state: present

- name: Add GG_ADM_ALL to a Group Policy Creator Owners group.
  win_domain_group_membership:
    name: "Group Policy Creator Owners"
    members: GG_ADM_ALL
    state: present

- name: Add GG_ADM_ALL to a Schema Admins group.
  win_domain_group_membership:
    name: "Schema Admins"
    members: GG_ADM_ALL
    state: present

- name: Ensure user siilyo is present
  win_domain_user:
    name: siilyo
    password: "{{ ad_siilyo_password }}"
    state: present
    path: "OU=Admins,OU=ORGANIZATION,{{ ad_domain }}"
    groups: GG_ADM_ALL

- name: Copy ADMX Google Files [1/4]
  win_copy:
    src: files/admx/chrome.admx
    dest: C:\Windows\PolicyDefinitions\chrome.admx

- name: Copy ADMX Google Files [2/4]
  win_copy:
    src: files/admx/google.admx
    dest: C:\Windows\PolicyDefinitions\google.admx

- name: Copy ADMX Google Files [3/4]
  win_copy:
    src: files/admx/en-US/chrome.adml
    dest: C:\Windows\PolicyDefinitions\en-US\chrome.adml

- name: Copy ADMX Google Files [4/4]
  win_copy:
    src: files/admx/en-US/google.adml
    dest: C:\Windows\PolicyDefinitions\en-US\google.adml

- name: Set NTP config
  win_shell: |
    w32tm /config /manualpeerlist:"0.pool.ntp.org 1.pool.ntp.org 2.pool.ntp.org" /syncfromflags:manual /reliable:yes /update

- name: Mount all offlines volumes
  win_shell: |
    $off_disk=(Get-Disk | Where-Object OperationalStatus -eq "Offline")
    if ($off_disk"){
    $off_disk | Set-Disk -IsOffline $False
    $off_disk | Initialize-Disk -PartitionStyle GPT
    $off_disk | New-Partition -UseMaximumSize -AssignDriveLetter
    $off_disk | New-Partition -UseMaximumSize -AssignDriveLetter | Format-Volume
    Write-Host Change
    }
  register: ad_volumes_init
  changed_when: ("Change" in ad_volumes_init.stdout)
